"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –±–æ—Ç–∞.
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –∏
–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å Google Sheets.
"""

import asyncio
import logging
from aiogram import types
from aiogram.fsm.context import FSMContext

from configurations.quiz_manager import QuizManager, QuizStates
import storage as storage
from data.google_sheets import sheets_manager
from configurations.keyboards import (
    get_main_keyboard,
    get_quiz_mode_keyboard,
    get_cancel_keyboard,
    get_quiz_question_keyboard,
)


logger = logging.getLogger("bot_logger")


quiz_manager = QuizManager(storage.quiz_questions)
quiz_data = {}


def calculate_grade(score, total_questions):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
    percentage = (score / total_questions) * 100

    if percentage >= 90:
        return "üéâ –û—Ç–ª–∏—á–Ω–æ!", "üèÜ"
    elif percentage >= 75:
        return "üëç –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!", "‚≠ê"
    elif percentage >= 60:
        return "üôÇ –•–æ—Ä–æ—à–æ!", "‚úÖ"
    elif percentage >= 40:
        return "üòê –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "üìò"
    else:
        return "üí™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", "üìö"


async def quiz_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞."""
    await state.set_state(QuizStates.choosing_mode)
    user_id = message.from_user.id

    can_play_competitive = not sheets_manager.is_competitive_completed(user_id)

    if not can_play_competitive:
        message_text = (
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - ‚ùå –ü–†–û–ô–î–ï–ù\n"
            "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n\n"
            "üéñÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º\n"
            "‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–µ—Ä–æ—è–º\n"
            "‚Ä¢ –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è\n\n"
            "üéØ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑\n"
            "‚Ä¢ –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        )
    else:
        message_text = (
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n"
            "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è\n\n"
            "üéñÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º\n"
            "‚Ä¢ –¢–µ—Å—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–µ—Ä–æ—è–º\n"
            "‚Ä¢ –î–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è\n\n"
            "üéØ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑\n"
            "‚Ä¢ –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        )

    await message.answer(
        message_text, reply_markup=get_quiz_mode_keyboard(can_play_competitive)
    )


async def start_practice_mode(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await state.set_state(QuizStates.in_practice_quiz)
    user_id = message.from_user.id

    random_questions = quiz_manager.get_random_questions(5)

    quiz_data[user_id] = {
        "current_question": 0,
        "score": 0,
        "total_questions": 5,
        "questions": random_questions,
        "mode": "practice",
    }

    await message.answer(
        "üéØ *–ù–∞—á–∞–ª—Å—è –ø—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º!*\n"
        "‚Ä¢ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑\n"
        "‚Ä¢ –£–¥–∞—á–∏! üçÄ",
        parse_mode="Markdown",
    )

    await asyncio.sleep(1.5)
    await send_question(message, user_id)


async def start_competitive_mode(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.")

    if sheets_manager.is_competitive_completed(user_id):
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!\n"
            "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    quiz_data[user_id] = {
        "current_question": 0,
        "score": 0,
        "total_questions": 10,
        "questions": [],
        "mode": "competitive",
    }

    await state.set_state(QuizStates.waiting_for_first_name)

    await message.answer(
        "üèÜ *–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"
        " –Ω–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n"
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è*:\n",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown",
    )


async def process_first_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    if user_id not in quiz_data:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    if message.text == "‚èπÔ∏è –û—Ç–º–µ–Ω–∞":
        await cancel_quiz(message, state)
        return

    first_name = message.text.strip()

    quiz_data[user_id]["first_name"] = first_name

    await state.set_state(QuizStates.waiting_for_last_name)

    await message.answer(
        "‚úÖ *–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ!*\n\n"
        "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É *—Ñ–∞–º–∏–ª–∏—é*:\n",
        parse_mode="Markdown",
    )


async def process_last_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id

    if user_id not in quiz_data:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    if message.text == "‚èπÔ∏è –û—Ç–º–µ–Ω–∞":
        await cancel_quiz(message, state)
        return

    last_name = message.text.strip()

    quiz_data[user_id]["last_name"] = last_name
    await state.set_state(QuizStates.waiting_for_educational_info)

    await message.answer(
        "‚úÖ *–§–∞–º–∏–ª–∏—è –ø—Ä–∏–Ω—è—Ç–∞!*\n\n"
        "üéì –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *—É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ*:\n"
        "_(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–ì–£', '–®–∫–æ–ª–∞ ‚Ññ123', '–ö–æ–ª–ª–µ–¥–∂ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏')_",
        parse_mode="Markdown",
    )


async def process_educational_info(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–±–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏."""
    user_id = message.from_user.id

    if user_id not in quiz_data:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    if message.text == "‚èπÔ∏è –û—Ç–º–µ–Ω–∞":
        await cancel_quiz(message, state)
        return

    educational_institution = message.text.strip()

    quiz_data[user_id]["educational_institution"] = educational_institution
    quiz_data[user_id]["questions"] = quiz_manager.get_random_questions(10)

    await state.set_state(QuizStates.in_competitive_quiz)

    await message.answer(
        "‚úÖ *–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
        "üèÜ *–ù–∞—á–∞–ª—Å—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º!*\n"
        "‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
        "‚Ä¢ –£–¥–∞—á–∏! üçÄ",
        parse_mode="Markdown",
    )
    await asyncio.sleep(2)
    await send_question(message, user_id)


async def send_question(message: types.Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    current_question_idx = quiz_data[user_id]["current_question"]
    questions_list = quiz_data[user_id]["questions"]
    mode = quiz_data[user_id]["mode"]

    if current_question_idx >= len(questions_list):
        await finish_quiz(message, user_id)
        return

    question_data = quiz_manager.get_question(questions_list,
                                              current_question_idx)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None
    if question_data is None:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=get_main_keyboard(),
        )
        if user_id in quiz_data:
            del quiz_data[user_id]
        return

    keyboard = get_quiz_question_keyboard(question_data["options"])

    total_questions = 10 if mode == "competitive" else 5

    await message.answer(
        f"‚ùì *–í–æ–ø—Ä–æ—Å {current_question_idx + 1}/{total_questions}*\n\n"
        f"{question_data['question']}",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


async def handle_quiz_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    user_id = message.from_user.id

    if user_id not in quiz_data:
        await message.answer(
            "‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    if message.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
        await cancel_quiz(message, state)
        return

    current_question_idx = quiz_data[user_id]["current_question"]
    questions_list = quiz_data[user_id]["questions"]

    question_data = quiz_manager.get_question(questions_list,
                                              current_question_idx)

    if message.text not in question_data["options"]:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞."
        )
        return

    is_correct = quiz_manager.check_answer(question_data, message.text)
    if is_correct:
        quiz_data[user_id]["score"] += 1

    quiz_data[user_id]["current_question"] += 1
    await send_question(message, user_id)


async def cancel_quiz(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–æ—Å—Ä–æ—á–Ω–æ."""
    user_id = message.from_user.id

    if user_id in quiz_data:
        score = quiz_data[user_id]["score"]
        current = quiz_data[user_id]["current_question"]
        mode = quiz_data[user_id]["mode"]

        if mode == "competitive":
            user_data = quiz_data[user_id]
            success = sheets_manager.save_competitive_result(
                {
                    "chat_id": user_id,
                    "first_name": user_data.get("first_name", ""),
                    "last_name": user_data.get("last_name", ""),
                    "educational_institution": user_data.get(
                        "educational_institution", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    ),
                    "correct_answers": score,
                    "total_questions": current,
                }
            )

            if success:
                await message.answer(
                    f"üèÜ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ!*\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                    f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{current}\n\n"
                    f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—É!*\n"
                    f"–ë–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º.",
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown",
                )
            else:
                await message.answer(
                    f"üèÜ *–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ!*\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                    f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{current}\n\n"
                    f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=get_main_keyboard(),
                    parse_mode="Markdown",
                )
        else:
            await message.answer(
                f"üéØ *–ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ!*\n\n"
                f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{current}",
                reply_markup=get_main_keyboard(),
                parse_mode="Markdown",
            )

        del quiz_data[user_id]

    await state.clear()


async def finish_quiz(message: types.Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    score = quiz_data[user_id]["score"]
    total = quiz_data[user_id]["total_questions"]
    mode = quiz_data[user_id]["mode"]

    percentage = (score / total) * 100
    grade, emoji = calculate_grade(score, total)

    if mode == "competitive":
        user_data = quiz_data[user_id]
        success = sheets_manager.save_competitive_result(
            {
                "chat_id": user_id,
                "first_name": user_data.get("first_name", ""),
                "last_name": user_data.get("last_name", ""),
                "educational_institution": user_data.get(
                    "educational_institution", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                ),
                "correct_answers": score,
                "total_questions": total,
            }
        )

        if success:
            result_text = (
                f"{emoji} *–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!* {emoji}\n\n"
                f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n"
                f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {grade}\n"
                "‚Ä¢ –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:"
                f"{user_data.get('educational_institution', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                f"‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéØ"
            )
        else:
            result_text = (
                f"{emoji} *–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!* {emoji}\n\n"
                f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}\n"
                f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n"
                f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {grade}\n\n"
                f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞*\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    else:
        result_text = (
            f"{emoji} *–ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!* {emoji}\n\n"
            f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n"
            f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {grade}\n\n"
            f"üîÑ –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑!"
        )

    await message.answer(
        result_text, reply_markup=get_main_keyboard(), parse_mode="Markdown"
    )

    if user_id in quiz_data:
        del quiz_data[user_id]


def get_competitive_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É."""
    try:
        stats = sheets_manager.get_statistics()
        results = sheets_manager.get_all_results()

        return {
            "total_participants": stats["total_participants"],
            "average_score": stats["average_score"],
            "best_score": stats["best_score"],
            "total_records": len(results),
            "storage_type": "Google Sheets",
        }
    except Exception:
        return {
            "total_participants": 0,
            "average_score": 0,
            "best_score": 0,
            "total_records": 0,
            "storage_type": "Google Sheets (–æ—à–∏–±–∫–∞)",
        }


def cleanup_quiz_data():
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ."""
    expired_users = []

    for user_id, data in quiz_data.items():
        # –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        pass

    for user_id in expired_users:
        del quiz_data[user_id]

    return len(expired_users)
