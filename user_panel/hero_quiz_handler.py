from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

from configurations.quiz_manager import HeroQuizManager
import storage
from configurations.keyboards import get_main_keyboard


hero_quiz_manager = HeroQuizManager()


def create_heroes_quiz_keyboard(page: int = 0,):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    total_heroes = 35
    heroes_per_page = 5
    total_pages = (total_heroes + heroes_per_page - 1) // heroes_per_page

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–µ—Ä–æ–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_hero = page * heroes_per_page + 1
    end_hero = min((page + 1) * heroes_per_page, total_heroes)

    for hero_id in range(start_hero, end_hero + 1):
        hero_name = storage.HERO_NAMES.get(hero_id, f"–ì–µ—Ä–æ–π {hero_id}")
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"üéØ {hero_name}", callback_data=f"hero_quiz_{hero_id}"
                )
            ]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"hero_quiz_page_{page - 1}"
            )
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        navigation_buttons.append(
            InlineKeyboardButton(
                text=f"{page + 1}/{total_pages}",
                callback_data="hero_quiz_current_page"
            )
        )

    if page < total_pages - 1:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"hero_quiz_page_{page + 1}"
            )
        )

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append(
        [InlineKeyboardButton(text="‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                              callback_data="hero_quiz_back")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def send_hero_question(message: types.Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º"""

    if user_id not in hero_quiz_manager.quiz_data:
        print(f"DEBUG: User {user_id} not in quiz_data")
        await message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞",
                             reply_markup=get_main_keyboard())
        return

    quiz_data = hero_quiz_manager.quiz_data[user_id]
    current_question_idx = quiz_data["current_question"]
    questions_list = quiz_data["questions"]

    if current_question_idx >= len(questions_list):
        await finish_hero_quiz(message, user_id)
        return

    question_data = hero_quiz_manager.get_question(questions_list,
                                                   current_question_idx)

    if not question_data:
        await finish_hero_quiz(message, user_id)
        return

    # –°–æ–∑–¥–∞–µ–º 4 —Ä—è–¥–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options = question_data["options"]
    options_rows = []

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ 4 —Ä—è–¥–∞–º
    total_options = len(options)
    if total_options <= 4:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ 4 –∏–ª–∏ –º–µ–Ω—å—à–µ - –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
        for option in options:
            options_rows.append([KeyboardButton(text=option)])
    else:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É –ø–æ 4 —Ä—è–¥–∞–º
        base_per_row = total_options // 4
        remainder = total_options % 4

        index = 0
        for row in range(4):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º —Ä—è–¥—É
            row_items = base_per_row + (1 if row < remainder else 0)
            if index < total_options:
                row_buttons = [
                    KeyboardButton(
                        text=options[i]) for i in range(
                            index, index + row_items)]
                options_rows.append(row_buttons)
                index += row_items

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    options_rows.append([KeyboardButton(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")])

    keyboard = ReplyKeyboardMarkup(
        keyboard=options_rows,
        resize_keyboard=True,
    )

    await message.answer(
        f"üéñÔ∏è *{quiz_data['hero_name']}*\n"
        "‚ùì "
        f"–í–æ–ø—Ä–æ—Å {current_question_idx + 1}/{quiz_data['total_questions']}\n\n"
        f"{question_data['question']}",
        reply_markup=keyboard,
        parse_mode="Markdown",
    )


async def handle_hero_quiz_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –ø–æ –≥–µ—Ä–æ—è–º"""
    user_id = message.from_user.id

    if user_id not in hero_quiz_manager.quiz_data:
        await message.answer("‚ùå –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        await state.clear()
        return

    if message.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É":
        await cancel_hero_quiz(message, state)
        return

    quiz_data = hero_quiz_manager.quiz_data[user_id]
    current_question_idx = quiz_data["current_question"]
    questions_list = quiz_data["questions"]

    question_data = hero_quiz_manager.get_question(questions_list,
                                                   current_question_idx)

    if not question_data:
        await finish_hero_quiz(message, user_id)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if message.text not in question_data["options"]:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    is_correct = hero_quiz_manager.check_answer(question_data, message.text)
    if is_correct:
        quiz_data["score"] += 1

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    quiz_data["current_question"] += 1

    # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_hero_question(message, user_id)


async def finish_hero_quiz(message: types.Message, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º"""
    if user_id not in hero_quiz_manager.quiz_data:
        return

    quiz_data = hero_quiz_manager.quiz_data[user_id]
    score = quiz_data["score"]
    total = quiz_data["total_questions"]
    hero_name = quiz_data["hero_name"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
    percentage = (score / total) * 100 if total > 0 else 0
    if percentage >= 90:
        grade = "üéâ –û—Ç–ª–∏—á–Ω–æ!"
    elif percentage >= 75:
        grade = "üëç –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!"
    elif percentage >= 60:
        grade = "üôÇ –•–æ—Ä–æ—à–æ!"
    elif percentage >= 40:
        grade = "üòê –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        grade = "üí™ –ù–µ –æ—á–µ–Ω—å..."

    result_text = (
        f"üéñÔ∏è *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {hero_name}*\n\n"
        f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
        f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{total}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n"
        f"‚Ä¢ –û—Ü–µ–Ω–∫–∞: {grade}\n\n"
        f"üîÑ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≥–µ—Ä–æ—è!"
    )

    await message.answer(result_text, reply_markup=get_main_keyboard(),
                         parse_mode="Markdown")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in hero_quiz_manager.quiz_data:
        del hero_quiz_manager.quiz_data[user_id]


async def cancel_hero_quiz(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º"""
    user_id = message.from_user.id

    if user_id in hero_quiz_manager.quiz_data:
        quiz_data = hero_quiz_manager.quiz_data[user_id]
        score = quiz_data["score"]
        current = quiz_data["current_question"]
        hero_name = quiz_data["hero_name"]

        await message.answer(
            f"üéñÔ∏è *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {hero_name}*\n\n"
            f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:*\n"
            f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score}/{current}",
            reply_markup=get_main_keyboard,
            parse_mode="Markdown",
        )

        del hero_quiz_manager.quiz_data[user_id]

    await state.clear()
