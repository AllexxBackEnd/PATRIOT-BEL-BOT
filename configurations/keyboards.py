from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)

import storage


def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üí™ –£–∑–Ω–∞—Ç—å –æ –≥–µ—Ä–æ—è—Ö"),
                KeyboardButton(text="üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞"),
            ],
            [KeyboardButton(text="üë∏ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")],
            [KeyboardButton(text="‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")],
        ],
        resize_keyboard=True,
    )


def get_quiz_mode_keyboard(can_play_competitive=True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    competitive_button = (
        [KeyboardButton(text="üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")]
        if can_play_competitive
        else []
    )

    keyboard_rows = [
        [KeyboardButton(text="üéñÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º")],
        competitive_button,
        [KeyboardButton(text="üéØ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º")],
        [KeyboardButton(text="‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ]

    keyboard_rows = [row for row in keyboard_rows if row]
    return ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)


def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]],
        resize_keyboard=True
    )


def get_quiz_question_keyboard(options):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ 4 —Å—Ç—Ä–æ–∫–∞–º, 5-—è —Å—Ç—Ä–æ–∫–∞ - –æ—Ç–º–µ–Ω–∞.
    """
    keyboard = []

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ 4 —Å—Ç—Ä–æ–∫–∞–º
    total_options = len(options)

    if total_options <= 4:
        # –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ 4 –∏–ª–∏ –º–µ–Ω—å—à–µ - –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ä—è–¥
        for option in options:
            keyboard.append([KeyboardButton(text=option)])
    else:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É –ø–æ 4 —Ä—è–¥–∞–º
        base_per_row = total_options // 4
        remainder = total_options % 4

        index = 0
        for row in range(4):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º —Ä—è–¥—É
            row_items = base_per_row + (1 if row < remainder else 0)
            if index < total_options:
                row_buttons = [
                    KeyboardButton(text=options[i])
                    for i in range(index, index + row_items)
                ]
                keyboard.append(row_buttons)
                index += row_items

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
    keyboard.append([KeyboardButton(text="‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–µ—Ä–æ–µ–≤
def create_heroes_keyboard(page: int = 0):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–µ—Ä–æ–µ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    heroes_per_page = 5
    total_heroes = len(storage.HERO_URLS)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞
    if page < 0:
        page = 0

    total_pages = (total_heroes + heroes_per_page - 1) // heroes_per_page
    if page >= total_pages:
        page = total_pages - 1

    start_index = page * heroes_per_page
    end_index = min(start_index + heroes_per_page, total_heroes)

    keyboard = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–µ—Ä–æ–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–º–µ–Ω–∞–º–∏ –∏–∑ HERO_NAMES
    for i in range(start_index, end_index):
        hero_id = i + 1
        hero_name = storage.HERO_NAMES.get(hero_id, f"–ì–µ—Ä–æ–π ‚Ññ{hero_id}")
        keyboard.append(
            [InlineKeyboardButton(text=hero_name, url=storage.HERO_URLS[i])]
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_buttons = []

    if page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"heroes_page_{page - 1}"
            )
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        navigation_buttons.append(
            InlineKeyboardButton(
                text=f"{page + 1}/{total_pages}",
                callback_data="heroes_current_page"
            )
        )

    if page < total_pages - 1:
        navigation_buttons.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"heroes_page_{page + 1}"
            )
        )

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append(
        [InlineKeyboardButton(text="‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                              callback_data="main_menu")]
    )

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
heroes_keyboard = create_heroes_keyboard(0)
