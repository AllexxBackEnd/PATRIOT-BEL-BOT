import datetime
import logging

import gspread
from google.oauth2.service_account import Credentials

from config import GOOGLE_SHEETS_CREDENTIALS, SPREADSHEET_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SERVICE_ACCOUNT_FILE = GOOGLE_SHEETS_CREDENTIALS
SPREADSHEET_ID = SPREADSHEET_ID

logger = logging.getLogger("bot_logger")


class GoogleSheetsManager:
    def __init__(self):
        self.client = None
        self.sheet = None
        self.connect()

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º."""
        try:
            creds = Credentials.from_service_account_file(
                SERVICE_ACCOUNT_FILE, scopes=SCOPES
            )
            self.client = gspread.authorize(creds)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            self.sheet = self.client.open_by_key(SPREADSHEET_ID).sheet1
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            self._ensure_headers()

        except gspread.SpreadsheetNotFound:
            logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ —Å ID '{SPREADSHEET_ID}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ—Å—Ç—É–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
            self.sheet = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–∞–º: {e}")
            self.sheet = None

    def _ensure_headers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        if self.sheet is None:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
            first_row = self.sheet.row_values(1)

            # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            expected_headers = [
                "ID",
                "Timestamp",
                "Chat ID",
                "First Name",
                "Last Name",
                "Educational Institution",
                "Correct Answers",
                "Total Questions",
                "Percentage",
                "Grade",
            ]

            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å
            # –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            if not first_row or first_row != expected_headers:
                logger.info("üìù –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ...")
                self.sheet.clear()  # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç
                self.sheet.append_row(expected_headers)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    def _get_clean_records(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            expected_headers = [
                "ID",
                "Timestamp",
                "Chat ID",
                "First Name",
                "Last Name",
                "Educational Institution",
                "Correct Answers",
                "Total Questions",
                "Percentage",
                "Grade",
            ]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
            all_data = self.sheet.get_all_values()

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
            if len(all_data) <= 1:
                return []

            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            data_rows = all_data[1:]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            records = []
            for row in data_rows:
                if any(row):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, –¥–æ–ø–æ–ª–Ω—è—è –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    record = {}
                    for i, header in enumerate(expected_headers):
                        if i < len(row):
                            record[header] = row[i]
                        else:
                            record[header] = ""
                    records.append(record)

            return records

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
            return []

    def save_competitive_result(self, user_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if self.sheet is None:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return False

        try:
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
            records = self._get_clean_records()
            next_id = len(records) + 1

            # –†–∞—Å—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏
            correct_answers = user_data["correct_answers"]
            total_questions = user_data["total_questions"]
            percentage = round((correct_answers / total_questions) * 100, 2)
            grade = self.calculate_grade(percentage)

            row_data = [
                next_id,
                timestamp,
                str(user_data["chat_id"]),
                user_data.get("first_name", ""),
                user_data.get("last_name", ""),
                user_data.get("educational_institution", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                correct_answers,
                total_questions,
                f"{percentage}%",
                grade,
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
            self.sheet.append_row(row_data)
            logger.info(
                "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                f"{user_data['chat_id']}"
            )
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google –¢–∞–±–ª–∏—Ü—ã: {e}")
            return False

    def calculate_grade(self, percentage):
        """–†–∞—Å—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        if percentage >= 90:
            return "–û—Ç–ª–∏—á–Ω–æ"
        elif percentage >= 75:
            return "–•–æ—Ä–æ—à–æ"
        elif percentage >= 60:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"

    def is_competitive_completed(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"""
        if self.sheet is None:
            return False

        try:
            records = self._get_clean_records()
            for record in records:
                if record.get(
                  "Chat ID"
                 ) and str(record["Chat ID"]) == str(chat_id):
                    return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return False

    def get_all_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        return self._get_clean_records()

    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        try:
            results = self.get_all_results()
            if not results:
                return {
                    "total_participants": 0,
                    "average_score": 0,
                    "average_percentage": 0,
                    "best_score": 0,
                }

            total_participants = len(results)
            total_correct = 0
            best_score = 0

            for result in results:
                try:
                    correct = int(result.get("Correct Answers", 0))
                    total_correct += correct
                    if correct > best_score:
                        best_score = correct
                except (ValueError, TypeError):
                    continue

            average_score = (
                round(total_correct / total_participants, 2)
                if total_participants > 0
                else 0
            )

            return {
                "total_participants": total_participants,
                "average_score": average_score,
                "best_score": best_score,
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"total_participants": 0, "average_score": 0,
                    "best_score": 0}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
sheets_manager = GoogleSheetsManager()
