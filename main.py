"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –±–æ—Ç–∞ PATRIOT BOT.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
"""

import asyncio
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from configurations.callbacks import (
    handle_hero_quiz_selection,
    handle_main_menu,
    handle_heroes_pagination,
    start_hero_quiz_mode
                                      )
from configurations.quiz_manager import HeroQuizStates
from config import BOT_TOKEN
from logs.logging_setup import setup_logger
from user_panel.heroes import heroes_button
from user_panel.information import information_button
from user_panel.leaderboard import show_leaderboard
from user_panel.quiz_handler import (
    quiz_button,
    handle_quiz_answer,
    cancel_quiz,
    start_practice_mode,
    start_competitive_mode,
    process_first_name,
    process_last_name,
    process_educational_info,
    QuizStates,
)
from user_panel.hero_quiz_handler import (
    handle_hero_quiz_answer,
    cancel_hero_quiz,
)
from commands.start import process_start_command
from commands.unknown_message import unknown_message
from commands.main_menu_command import show_main_menu


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================


def register_callbacks():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(
        handle_main_menu,
        lambda callback: callback.data == "main_menu",
    )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤
    dp.callback_query.register(
        handle_heroes_pagination,
        lambda callback: callback.data.startswith("heroes_page_"),
    )

    # –í—ã–±–æ—Ä –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º
    dp.callback_query.register(
        handle_hero_quiz_selection, HeroQuizStates.choosing_hero_quiz
    )


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

@dp.message(Command("main_menu"))
async def command_main_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã mein_menu"""
    await show_main_menu(message)


@dp.message(Command("start"))
async def command_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await process_start_command(message)


@dp.message(Command("help"))
async def command_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
        "üéØ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞* - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:\n"
        "   ‚Ä¢ üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞)\n"
        "   ‚Ä¢ üéØ –ü—Ä–æ–±–Ω—ã–π (5 –≤–æ–ø—Ä–æ—Å–æ–≤, –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫)\n"
        "   ‚Ä¢ üéñÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º - —Ç–µ—Å—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≥–µ—Ä–æ—è–º\n\n"
        "üë§ *–£–∑–Ω–∞—Ç—å –æ –≥–µ—Ä–æ—è—Ö* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ—è—Ö "
        "–í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã\n\n"
        "üìä *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤* - –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ\n\n"
        "‚öôÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ* - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "üîÑ *–ù–∞–∑–∞–¥* - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await message.answer(help_text, parse_mode="Markdown")


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ====================


@dp.message(lambda message: message.text == "‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await show_main_menu(message)


@dp.message(lambda message: message.text == "üë∏ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")
async def leaderboard_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤."""
    await show_leaderboard(message)


@dp.message(lambda message: message.text == "üí™ –£–∑–Ω–∞—Ç—å –æ –≥–µ—Ä–æ—è—Ö")
async def heroes_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–∑–Ω–∞—Ç—å –æ –≥–µ—Ä–æ—è—Ö."""
    await heroes_button(message)


@dp.message(lambda message: message.text == "‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
async def information_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ."""
    await information_button(message)


@dp.message(lambda message: message.text == "üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞."""
    await quiz_button(message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ò–ö–¢–û–†–ò–ù–´ ====================

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º
dp.message.register(
    start_hero_quiz_mode,
    lambda message: message.text == "üéñÔ∏è –í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≥–µ—Ä–æ—è–º",
    QuizStates.choosing_mode,
)

dp.message.register(handle_hero_quiz_answer, HeroQuizStates.in_hero_quiz)

dp.message.register(
    cancel_hero_quiz,
    lambda message: message.text == "‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
    HeroQuizStates.in_hero_quiz,
)


@dp.message(
    lambda message: message.text == "üéØ –ü—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º", QuizStates.choosing_mode
)
async def practice_mode_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await start_practice_mode(message, state)


@dp.message(
    lambda message: message.text == "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
    QuizStates.choosing_mode,
)
async def competitive_mode_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await start_competitive_mode(message, state)


@dp.message(lambda message: message.text == "‚èπÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            QuizStates.choosing_mode)
async def back_to_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏–∑ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await show_main_menu(message)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ë–û–†–ê –î–ê–ù–ù–´–• ====================


@dp.message(QuizStates.waiting_for_first_name)
async def first_name_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    await process_first_name(message, state)


@dp.message(QuizStates.waiting_for_last_name)
async def last_name_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    await process_last_name(message, state)


@dp.message(QuizStates.waiting_for_educational_info)
async def educational_info_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    await process_educational_info(message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–í–ï–¢–û–í –í –í–ò–ö–¢–û–†–ò–ù–ï ====================


@dp.message(QuizStates.in_practice_quiz)
async def practice_quiz_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø—Ä–æ–±–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await handle_quiz_answer(message, state)


@dp.message(QuizStates.in_competitive_quiz)
async def competitive_quiz_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await handle_quiz_answer(message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ –í–ò–ö–¢–û–†–ò–ù–´ ====================

@dp.message(
    lambda message: message.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
    QuizStates.in_practice_quiz
)
async def cancel_practice_quiz_handler(message: types.Message,
                                       state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–±–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await cancel_quiz(message, state)


@dp.message(
    lambda message: message.text == "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
    QuizStates.in_competitive_quiz,
)
async def cancel_competitive_quiz_handler(message: types.Message,
                                          state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    await cancel_quiz(message, state)


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================


@dp.message()
async def unknown_message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await unknown_message(message)


# ==================== –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –ò –û–°–¢–ê–ù–û–í–ö–ò ====================


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥.
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_callbacks()
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        await dp.start_polling(bot,
                               allowed_updates=dp.resolve_used_update_types())

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await bot.session.close()


def check_required_files():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞.

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    required_files = [
        "config.py",
        "storage.py",
        "commands/start.py",
        "commands/unknown_message.py",
        "logs/logging_setup.py",
        "user_panel/heroes.py",
        "user_panel/information.py",
        "user_panel/leaderboard.py",
        "user_panel/quiz_handler.py",
        "user_panel/hero_quiz_handler.py",
    ]

    missing_files = []

    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)

    if missing_files:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            logger.error(f"   - {file}")
        return False

    return True


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not check_required_files():
        exit(1)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
    asyncio.run(main())
